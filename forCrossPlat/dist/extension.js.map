{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://music-crossplatform/external node-commonjs \"child_process\"","webpack://music-crossplatform/./src/musicController.ts","webpack://music-crossplatform/external commonjs \"vscode\"","webpack://music-crossplatform/./src/musicService.ts","webpack://music-crossplatform/external node-commonjs \"os\"","webpack://music-crossplatform/webpack/bootstrap","webpack://music-crossplatform/./src/extension.ts"],"sourcesContent":["module.exports = require(\"child_process\");","import * as vscode from 'vscode';\nimport { CrossPlatformMusicService, TrackInfo } from './musicService';\n\nexport class MusicController implements vscode.Disposable {\n    private musicService: CrossPlatformMusicService;\n    private statusBarItem: vscode.StatusBarItem;\n    private musicWebviewProvider: MusicWebviewProvider;\n    private disposables: vscode.Disposable[] = [];\n    private cornerWidget: vscode.StatusBarItem | null = null;\n\n    constructor(private context: vscode.ExtensionContext) {\n        this.musicService = new CrossPlatformMusicService();\n        this.statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 10);\n        this.musicWebviewProvider = new MusicWebviewProvider(context.extensionUri, this.musicService);\n\n        this.initializeComponents();\n        this.registerCommands();\n        this.setupEventHandlers();\n    }\n\n    private initializeComponents() {\n        // Register webview provider\n        const provider = vscode.window.registerWebviewViewProvider(\n            'musicExplorer',\n            this.musicWebviewProvider\n        );\n        this.disposables.push(provider);\n\n        // Initialize status bar\n        this.updateStatusBar(null);\n        const config = vscode.workspace.getConfiguration('music');\n        if (config.get<boolean>('showInStatusBar', true)) {\n            this.statusBarItem.show();\n        }\n\n        // Initialize corner widget if enabled\n        if (config.get<boolean>('enableCornerWidget', true)) {\n            this.showCornerWidget();\n        }\n\n        this.disposables.push(this.statusBarItem);\n    }\n\n    private registerCommands() {\n        const commands = [\n            vscode.commands.registerCommand('music.showCornerWidget', () => this.showCornerWidget()),\n            vscode.commands.registerCommand('music.hideCornerWidget', () => this.hideCornerWidget()),\n            vscode.commands.registerCommand('music.showMusicPanel', () => this.showMusicPanel()),\n            vscode.commands.registerCommand('music.playPause', () => this.musicService.playPause()),\n            vscode.commands.registerCommand('music.nextTrack', () => this.musicService.nextTrack()),\n            vscode.commands.registerCommand('music.previousTrack', () => this.musicService.previousTrack()),\n            vscode.commands.registerCommand('music.refreshMusicExplorer', () => this.musicWebviewProvider.refresh())\n        ];\n\n        this.disposables.push(...commands);\n    }\n\n    private setupEventHandlers() {\n        // Listen for track changes\n        this.musicService.onTrackChanged((track) => {\n            this.updateStatusBar(track);\n            this.updateCornerWidget(track);\n            this.musicWebviewProvider.updateTrack(track);\n        });\n\n        // Listen for position changes\n        this.musicService.onPositionChanged((position) => {\n            this.musicWebviewProvider.updatePosition(position);\n        });\n\n        // Listen for configuration changes\n        const configListener = vscode.workspace.onDidChangeConfiguration((e) => {\n            if (e.affectsConfiguration('music')) {\n                this.handleConfigurationChange();\n            }\n        });\n        this.disposables.push(configListener);\n    }\n\n    private updateStatusBar(track: TrackInfo | null) {\n        const config = vscode.workspace.getConfiguration('music');\n\n        if (!config.get<boolean>('showInStatusBar', true)) {\n            this.statusBarItem.hide();\n            return;\n        }\n\n        if (track && track.status !== 'stopped') {\n            const statusIcon = track.status === 'playing' ? '$(play)' : '$(debug-pause)';\n            const text = `${statusIcon} ${track.title} - ${track.artist}`;\n            this.statusBarItem.text = text;\n            this.statusBarItem.tooltip = `${track.title}\\n${track.artist}\\n${track.album}`;\n            this.statusBarItem.command = 'music.showMusicPanel';\n            this.statusBarItem.show();\n        } else {\n            this.statusBarItem.text = '$(music) No music playing';\n            this.statusBarItem.tooltip = 'No music currently playing';\n            this.statusBarItem.command = 'music.showMusicPanel';\n            this.statusBarItem.show();\n        }\n    }\n\n    private updateCornerWidget(track: TrackInfo | null) {\n        if (!this.cornerWidget) {\n            return;\n        }\n\n        if (track && track.status !== 'stopped') {\n            const statusIcon = track.status === 'playing' ? '♪' : '⏸';\n            this.cornerWidget.text = `${statusIcon} ${track.title}`;\n            this.cornerWidget.tooltip = `${track.title} - ${track.artist}`;\n        } else {\n            this.cornerWidget.text = '♪ No music';\n            this.cornerWidget.tooltip = 'No music playing';\n        }\n    }\n\n    private showCornerWidget() {\n        if (!this.cornerWidget) {\n            this.cornerWidget = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 1000);\n            this.cornerWidget.command = 'music.showMusicPanel';\n        }\n\n        const currentTrack = this.musicService.getCurrentTrack();\n        this.updateCornerWidget(currentTrack);\n        this.cornerWidget.show();\n\n        vscode.window.showInformationMessage('Music corner widget is now visible');\n    }\n\n    private hideCornerWidget() {\n        if (this.cornerWidget) {\n            this.cornerWidget.hide();\n            vscode.window.showInformationMessage('Music corner widget is now hidden');\n        }\n    }\n\n    private showMusicPanel() {\n        vscode.commands.executeCommand('musicExplorer.focus');\n    }\n\n    private handleConfigurationChange() {\n        const config = vscode.workspace.getConfiguration('music');\n\n        // Handle status bar visibility\n        if (config.get<boolean>('showInStatusBar', true)) {\n            this.statusBarItem.show();\n        } else {\n            this.statusBarItem.hide();\n        }\n\n        // Handle corner widget\n        if (config.get<boolean>('enableCornerWidget', true) && !this.cornerWidget) {\n            this.showCornerWidget();\n        } else if (!config.get<boolean>('enableCornerWidget', true) && this.cornerWidget) {\n            this.hideCornerWidget();\n        }\n    }\n\n    public dispose() {\n        this.musicService.dispose();\n        this.disposables.forEach(d => d.dispose());\n        if (this.cornerWidget) {\n            this.cornerWidget.dispose();\n        }\n    }\n}\n\nclass MusicWebviewProvider implements vscode.WebviewViewProvider {\n    private _view?: vscode.WebviewView;\n    private currentTrack: TrackInfo | null = null;\n    private currentPosition: number = 0;\n\n    constructor(\n        private readonly _extensionUri: vscode.Uri,\n        private musicService: CrossPlatformMusicService\n    ) { }\n\n    public resolveWebviewView(\n        webviewView: vscode.WebviewView,\n        context: vscode.WebviewViewResolveContext,\n        _token: vscode.CancellationToken,\n    ) {\n        this._view = webviewView;\n\n        webviewView.webview.options = {\n            enableScripts: true,\n            localResourceRoots: [this._extensionUri]\n        };\n\n        webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\n\n        webviewView.webview.onDidReceiveMessage(async (data) => {\n            switch (data.type) {\n                case 'playPause':\n                    await this.musicService.playPause();\n                    break;\n                case 'nextTrack':\n                    await this.musicService.nextTrack();\n                    break;\n                case 'previousTrack':\n                    await this.musicService.previousTrack();\n                    break;\n            }\n        });\n    }\n\n    public updateTrack(track: TrackInfo | null) {\n        this.currentTrack = track;\n        this._updateWebview();\n    }\n\n    public updatePosition(position: number) {\n        this.currentPosition = position;\n        this._updateWebview();\n    }\n\n    public refresh() {\n        if (this._view) {\n            this._view.webview.html = this._getHtmlForWebview(this._view.webview);\n        }\n    }\n\n    private _updateWebview() {\n        if (this._view) {\n            this._view.webview.postMessage({\n                type: 'updateTrack',\n                track: this.currentTrack,\n                position: this.currentPosition\n            });\n        }\n    }\n\n    private _getHtmlForWebview(webview: vscode.Webview) {\n        return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Music Player</title>\n    <style>\n        body {\n            font-family: var(--vscode-font-family);\n            font-size: var(--vscode-font-size);\n            color: var(--vscode-foreground);\n            background-color: var(--vscode-sideBar-background);\n            margin: 0;\n            padding: 16px;\n        }\n        \n        .music-container {\n            display: flex;\n            flex-direction: column;\n            gap: 12px;\n        }\n        \n        .track-info {\n            text-align: center;\n            padding: 12px;\n            background-color: var(--vscode-editor-background);\n            border-radius: 6px;\n            border: 1px solid var(--vscode-panel-border);\n        }\n        \n        .track-title {\n            font-weight: bold;\n            font-size: 14px;\n            margin-bottom: 4px;\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n        }\n        \n        .track-artist {\n            color: var(--vscode-descriptionForeground);\n            font-size: 12px;\n            margin-bottom: 2px;\n        }\n        \n        .track-album {\n            color: var(--vscode-descriptionForeground);\n            font-size: 11px;\n        }\n        \n        .progress-container {\n            margin: 8px 0;\n        }\n        \n        .progress-bar {\n            width: 100%;\n            height: 4px;\n            background-color: var(--vscode-progressBar-background);\n            border-radius: 2px;\n            overflow: hidden;\n        }\n        \n        .progress-fill {\n            height: 100%;\n            background-color: var(--vscode-progressBar-background);\n            transition: width 0.3s ease;\n        }\n        \n        .time-info {\n            display: flex;\n            justify-content: space-between;\n            font-size: 10px;\n            color: var(--vscode-descriptionForeground);\n            margin-top: 4px;\n        }\n        \n        .controls {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 12px;\n        }\n        \n        .control-btn {\n            background: var(--vscode-button-background);\n            color: var(--vscode-button-foreground);\n            border: none;\n            border-radius: 4px;\n            padding: 8px 12px;\n            cursor: pointer;\n            font-size: 12px;\n            transition: background-color 0.2s;\n        }\n        \n        .control-btn:hover {\n            background: var(--vscode-button-hoverBackground);\n        }\n        \n        .control-btn:active {\n            transform: scale(0.95);\n        }\n        \n        .no-music {\n            text-align: center;\n            color: var(--vscode-descriptionForeground);\n            font-style: italic;\n            padding: 24px;\n        }\n        \n        .status-indicator {\n            display: inline-block;\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            margin-right: 6px;\n        }\n        \n        .status-playing {\n            background-color: var(--vscode-testing-iconPassed);\n            animation: pulse 1.5s infinite;\n        }\n        \n        .status-paused {\n            background-color: var(--vscode-testing-iconQueued);\n        }\n        \n        .status-stopped {\n            background-color: var(--vscode-testing-iconFailed);\n        }\n        \n        @keyframes pulse {\n            0% { opacity: 1; }\n            50% { opacity: 0.5; }\n            100% { opacity: 1; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"music-container\">\n        <div id=\"trackInfo\" class=\"no-music\">\n            No music currently playing\n        </div>\n    </div>\n\n    <script>\n        const vscode = acquireVsCodeApi();\n        \n        let currentTrack = null;\n        let currentPosition = 0;\n\n        function formatTime(seconds) {\n            if (!seconds || isNaN(seconds)) return '--:--';\n            const mins = Math.floor(seconds / 60);\n            const secs = Math.floor(seconds % 60);\n            return mins + ':' + (secs < 10 ? '0' : '') + secs;\n        }\n\n        function updateUI() {\n            const container = document.getElementById('trackInfo');\n            \n            if (!currentTrack || currentTrack.status === 'stopped') {\n                container.className = 'no-music';\n                container.innerHTML = 'No music currently playing';\n                return;\n            }\n\n            const progressPercent = currentTrack.duration ? \n                (currentPosition / currentTrack.duration) * 100 : 0;\n\n            container.className = 'track-info';\n            container.innerHTML = \\`\n                <div class=\"track-title\">\n                    <span class=\"status-indicator status-\\${currentTrack.status}\"></span>\n                    \\${currentTrack.title}\n                </div>\n                <div class=\"track-artist\">\\${currentTrack.artist}</div>\n                <div class=\"track-album\">\\${currentTrack.album}</div>\n                \n                \\${currentTrack.duration ? \\`\n                <div class=\"progress-container\">\n                    <div class=\"progress-bar\">\n                        <div class=\"progress-fill\" style=\"width: \\${progressPercent}%\"></div>\n                    </div>\n                    <div class=\"time-info\">\n                        <span>\\${formatTime(currentPosition)}</span>\n                        <span>\\${formatTime(currentTrack.duration)}</span>\n                    </div>\n                </div>\n                \\` : ''}\n                \n                <div class=\"controls\">\n                    <button class=\"control-btn\" onclick=\"sendCommand('previousTrack')\">⏮</button>\n                    <button class=\"control-btn\" onclick=\"sendCommand('playPause')\">\n                        \\${currentTrack.status === 'playing' ? '⏸' : '▶'}\n                    </button>\n                    <button class=\"control-btn\" onclick=\"sendCommand('nextTrack')\">⏭</button>\n                </div>\n            \\`;\n        }\n\n        function sendCommand(command) {\n            vscode.postMessage({ type: command });\n        }\n\n        // Listen for messages from the extension\n        window.addEventListener('message', event => {\n            const message = event.data;\n            if (message.type === 'updateTrack') {\n                currentTrack = message.track;\n                currentPosition = message.position || 0;\n                updateUI();\n            }\n        });\n\n        // Initial UI setup\n        updateUI();\n    </script>\n</body>\n</html>`;\n    }\n}","module.exports = require(\"vscode\");","import * as vscode from 'vscode';\nimport { spawn, ChildProcess, exec } from 'child_process';\nimport * as os from 'os';\n\nexport interface TrackInfo {\n    title: string;\n    artist: string;\n    album: string;\n    duration?: number;\n    position?: number;\n    status: 'playing' | 'paused' | 'stopped';\n}\n\nexport class CrossPlatformMusicService {\n    private updateInterval: NodeJS.Timeout | null = null;\n    private currentTrack: TrackInfo | null = null;\n    private onTrackChangedCallback?: (track: TrackInfo | null) => void;\n    private onPositionChangedCallback?: (position: number) => void;\n    private platform: string;\n    private musicAPI: WindowsMusicAPI | MacOSMusicAPI | LinuxMusicAPI;\n\n    constructor() {\n        this.platform = os.platform();\n        console.log(`Detected platform: ${this.platform}`);\n        \n        switch (this.platform) {\n            case 'win32':\n                this.musicAPI = new WindowsMusicAPI();\n                break;\n            case 'darwin':\n                this.musicAPI = new MacOSMusicAPI();\n                break;\n            default: // linux, freebsd, etc.\n                this.musicAPI = new LinuxMusicAPI();\n                break;\n        }\n        \n        this.initialize();\n    }\n\n    private async initialize() {\n        await this.musicAPI.initialize();\n        this.startPolling();\n    }\n\n    private startPolling() {\n        const config = vscode.workspace.getConfiguration('music');\n        const interval = config.get<number>('updateInterval', 1000);\n\n        this.updateInterval = setInterval(() => {\n            this.updateTrackInfo();\n        }, interval);\n    }\n\n    private async updateTrackInfo() {\n        try {\n            const trackInfo = await this.musicAPI.getCurrentTrack();\n            this.setCurrentTrack(trackInfo);\n        } catch (error) {\n            console.error('Error updating track info:', error);\n            this.setCurrentTrack(null);\n        }\n    }\n\n    private setCurrentTrack(track: TrackInfo | null) {\n        const wasPlayingBefore = this.currentTrack?.status === 'playing';\n        const isPlayingNow = track?.status === 'playing';\n        const trackChanged = !this.currentTrack ||\n            !track ||\n            this.currentTrack.title !== track.title ||\n            this.currentTrack.artist !== track.artist ||\n            this.currentTrack.status !== track.status;\n\n        const positionChanged = this.currentTrack && track &&\n            Math.abs((this.currentTrack.position || 0) - (track.position || 0)) > 2;\n\n        this.currentTrack = track;\n\n        if (trackChanged || wasPlayingBefore !== isPlayingNow) {\n            if (this.onTrackChangedCallback) {\n                this.onTrackChangedCallback(track);\n            }\n        } else if (positionChanged && track?.position !== undefined && this.onPositionChangedCallback) {\n            this.onPositionChangedCallback(track.position);\n        }\n    }\n\n    public getCurrentTrack(): TrackInfo | null {\n        return this.currentTrack;\n    }\n\n    public onTrackChanged(callback: (track: TrackInfo | null) => void) {\n        this.onTrackChangedCallback = callback;\n    }\n\n    public onPositionChanged(callback: (position: number) => void) {\n        this.onPositionChangedCallback = callback;\n    }\n\n    public async playPause() {\n        try {\n            await this.musicAPI.playPause();\n        } catch (error) {\n            console.error('Error toggling play/pause:', error);\n            vscode.window.showErrorMessage('Failed to toggle play/pause');\n        }\n    }\n\n    public async nextTrack() {\n        try {\n            await this.musicAPI.nextTrack();\n        } catch (error) {\n            console.error('Error skipping to next track:', error);\n            vscode.window.showErrorMessage('Failed to skip to next track');\n        }\n    }\n\n    public async previousTrack() {\n        try {\n            await this.musicAPI.previousTrack();\n        } catch (error) {\n            console.error('Error going to previous track:', error);\n            vscode.window.showErrorMessage('Failed to go to previous track');\n        }\n    }\n\n    public dispose() {\n        if (this.updateInterval) {\n            clearInterval(this.updateInterval);\n            this.updateInterval = null;\n        }\n        if (this.musicAPI) {\n            this.musicAPI.dispose?.();\n        }\n    }\n}\n\n// Abstract base class for platform-specific implementations\nabstract class MusicAPI {\n    abstract initialize(): Promise<void>;\n    abstract getCurrentTrack(): Promise<TrackInfo | null>;\n    abstract playPause(): Promise<void>;\n    abstract nextTrack(): Promise<void>;\n    abstract previousTrack(): Promise<void>;\n    dispose?(): void;\n}\n\n// Windows implementation using PowerShell and Windows Media Control\nclass WindowsMusicAPI extends MusicAPI {\n    private isAvailable = false;\n\n    async initialize(): Promise<void> {\n        try {\n            // Test if we can access Windows media control\n            await this.execPowerShell('Get-Process');\n            this.isAvailable = true;\n            console.log('Windows Media Control API initialized');\n        } catch (error) {\n            console.warn('Windows Media Control not available:', error);\n            this.isAvailable = false;\n        }\n    }\n\n    async getCurrentTrack(): Promise<TrackInfo | null> {\n        if (!this.isAvailable) {\n            return null;\n        }\n\n        try {\n            // PowerShell script to get current media info\n            const script = `\n                Add-Type -AssemblyName System.Windows.Forms\n                $sessions = [Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager]::RequestAsync().GetAwaiter().GetResult().GetSessions()\n                foreach ($session in $sessions) {\n                    $mediaProps = $session.TryGetMediaPropertiesAsync().GetAwaiter().GetResult()\n                    $playbackInfo = $session.GetPlaybackInfo()\n                    if ($mediaProps -and $playbackInfo.PlaybackStatus -ne 'Closed') {\n                        $title = $mediaProps.Title\n                        $artist = $mediaProps.Artist\n                        $album = $mediaProps.AlbumTitle\n                        $status = $playbackInfo.PlaybackStatus.ToString().ToLower()\n                        $position = $session.GetTimelineProperties().Position.TotalSeconds\n                        $duration = $session.GetTimelineProperties().EndTime.TotalSeconds\n                        Write-Output \"$title|$artist|$album|$position|$duration|$status\"\n                        break\n                    }\n                }\n            `;\n\n            const result = await this.execPowerShell(script);\n            return this.parseTrackInfo(result);\n        } catch (error) {\n            console.error('Error getting Windows media info:', error);\n            return null;\n        }\n    }\n\n    private parseTrackInfo(output: string): TrackInfo | null {\n        const lines = output.trim().split('\\n');\n        if (lines.length === 0 || !lines[0]) {\n            return null;\n        }\n\n        const parts = lines[0].split('|');\n        if (parts.length >= 6) {\n            return {\n                title: parts[0] || 'Unknown Title',\n                artist: parts[1] || 'Unknown Artist',\n                album: parts[2] || 'Unknown Album',\n                position: parseFloat(parts[3]) || 0,\n                duration: parseFloat(parts[4]) || undefined,\n                status: this.mapStatus(parts[5])\n            };\n        }\n\n        return null;\n    }\n\n    private mapStatus(status: string): 'playing' | 'paused' | 'stopped' {\n        switch (status?.toLowerCase()) {\n            case 'playing': return 'playing';\n            case 'paused': return 'paused';\n            default: return 'stopped';\n        }\n    }\n\n    async playPause(): Promise<void> {\n        const script = `\n            $sessions = [Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager]::RequestAsync().GetAwaiter().GetResult().GetSessions()\n            foreach ($session in $sessions) {\n                $playbackInfo = $session.GetPlaybackInfo()\n                if ($playbackInfo.PlaybackStatus -eq 'Playing') {\n                    $session.TryPauseAsync().GetAwaiter().GetResult()\n                } else {\n                    $session.TryPlayAsync().GetAwaiter().GetResult()\n                }\n                break\n            }\n        `;\n        await this.execPowerShell(script);\n    }\n\n    async nextTrack(): Promise<void> {\n        const script = `\n            $sessions = [Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager]::RequestAsync().GetAwaiter().GetResult().GetSessions()\n            foreach ($session in $sessions) {\n                $session.TrySkipNextAsync().GetAwaiter().GetResult()\n                break\n            }\n        `;\n        await this.execPowerShell(script);\n    }\n\n    async previousTrack(): Promise<void> {\n        const script = `\n            $sessions = [Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager]::RequestAsync().GetAwaiter().GetResult().GetSessions()\n            foreach ($session in $sessions) {\n                $session.TrySkipPreviousAsync().GetAwaiter().GetResult()\n                break\n            }\n        `;\n        await this.execPowerShell(script);\n    }\n\n    private execPowerShell(script: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            exec(`powershell -Command \"${script.replace(/\"/g, '\\\\\"')}\"`, (error, stdout, stderr) => {\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve(stdout);\n                }\n            });\n        });\n    }\n}\n\n// macOS implementation using AppleScript\nclass MacOSMusicAPI extends MusicAPI {\n    private isAvailable = false;\n\n    async initialize(): Promise<void> {\n        try {\n            await this.execAppleScript('tell application \"System Events\" to get name of processes');\n            this.isAvailable = true;\n            console.log('macOS AppleScript API initialized');\n        } catch (error) {\n            console.warn('AppleScript not available:', error);\n            this.isAvailable = false;\n        }\n    }\n\n    async getCurrentTrack(): Promise<TrackInfo | null> {\n        if (!this.isAvailable) {\n            return null;\n        }\n\n        try {\n            // Try different music applications\n            const apps = ['Music', 'Spotify', 'iTunes'];\n            \n            for (const app of apps) {\n                try {\n                    const script = `\n                        tell application \"${app}\"\n                            if player state is not stopped then\n                                set trackTitle to name of current track\n                                set trackArtist to artist of current track\n                                set trackAlbum to album of current track\n                                set trackPosition to player position\n                                set trackDuration to duration of current track\n                                set playerState to player state as string\n                                return trackTitle & \"|\" & trackArtist & \"|\" & trackAlbum & \"|\" & trackPosition & \"|\" & trackDuration & \"|\" & playerState\n                            end if\n                        end tell\n                    `;\n\n                    const result = await this.execAppleScript(script);\n                    const trackInfo = this.parseTrackInfo(result);\n                    if (trackInfo) {\n                        return trackInfo;\n                    }\n                } catch (error) {\n                    // Try next app\n                    continue;\n                }\n            }\n\n            return null;\n        } catch (error) {\n            console.error('Error getting macOS media info:', error);\n            return null;\n        }\n    }\n\n    private parseTrackInfo(output: string): TrackInfo | null {\n        const parts = output.trim().split('|');\n        if (parts.length >= 6) {\n            return {\n                title: parts[0] || 'Unknown Title',\n                artist: parts[1] || 'Unknown Artist',\n                album: parts[2] || 'Unknown Album',\n                position: parseFloat(parts[3]) || 0,\n                duration: parseFloat(parts[4]) || undefined,\n                status: this.mapStatus(parts[5])\n            };\n        }\n        return null;\n    }\n\n    private mapStatus(status: string): 'playing' | 'paused' | 'stopped' {\n        switch (status?.toLowerCase()) {\n            case 'playing': return 'playing';\n            case 'paused': return 'paused';\n            default: return 'stopped';\n        }\n    }\n\n    async playPause(): Promise<void> {\n        const apps = ['Music', 'Spotify', 'iTunes'];\n        \n        for (const app of apps) {\n            try {\n                await this.execAppleScript(`tell application \"${app}\" to playpause`);\n                break;\n            } catch (error) {\n                continue;\n            }\n        }\n    }\n\n    async nextTrack(): Promise<void> {\n        const apps = ['Music', 'Spotify', 'iTunes'];\n        \n        for (const app of apps) {\n            try {\n                await this.execAppleScript(`tell application \"${app}\" to next track`);\n                break;\n            } catch (error) {\n                continue;\n            }\n        }\n    }\n\n    async previousTrack(): Promise<void> {\n        const apps = ['Music', 'Spotify', 'iTunes'];\n        \n        for (const app of apps) {\n            try {\n                await this.execAppleScript(`tell application \"${app}\" to previous track`);\n                break;\n            } catch (error) {\n                continue;\n            }\n        }\n    }\n\n    private execAppleScript(script: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            exec(`osascript -e '${script.replace(/'/g, \"\\\\'\")}'`, (error, stdout, stderr) => {\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve(stdout);\n                }\n            });\n        });\n    }\n}\n\n// Linux implementation using playerctl\nclass LinuxMusicAPI extends MusicAPI {\n    private isAvailable = false;\n\n    async initialize(): Promise<void> {\n        try {\n            await this.execCommand('playerctl --version');\n            this.isAvailable = true;\n            console.log('Linux playerctl API initialized');\n        } catch (error) {\n            console.warn('playerctl not available:', error);\n            this.isAvailable = false;\n        }\n    }\n\n    async getCurrentTrack(): Promise<TrackInfo | null> {\n        if (!this.isAvailable) {\n            return null;\n        }\n\n        try {\n            const result = await this.execCommand('playerctl metadata --format \"{{title}}|{{artist}}|{{album}}|{{duration(position)}}|{{duration(mpris:length)}}|{{status}}\"');\n            return this.parseTrackInfo(result);\n        } catch (error) {\n            console.error('Error getting Linux media info:', error);\n            return null;\n        }\n    }\n\n    private parseTrackInfo(output: string): TrackInfo | null {\n        const parts = output.trim().split('|');\n        if (parts.length >= 6) {\n            return {\n                title: parts[0] || 'Unknown Title',\n                artist: parts[1] || 'Unknown Artist',\n                album: parts[2] || 'Unknown Album',\n                position: this.parseDuration(parts[3]),\n                duration: this.parseDuration(parts[4]),\n                status: this.mapStatus(parts[5])\n            };\n        }\n        return null;\n    }\n\n    private parseDuration(duration: string): number | undefined {\n        if (!duration || duration === '' || duration === 'null') {\n            return undefined;\n        }\n        const parts = duration.split(':');\n        if (parts.length === 2) {\n            const minutes = parseInt(parts[0]);\n            const seconds = parseInt(parts[1]);\n            if (!isNaN(minutes) && !isNaN(seconds)) {\n                return minutes * 60 + seconds;\n            }\n        }\n        return undefined;\n    }\n\n    private mapStatus(status: string): 'playing' | 'paused' | 'stopped' {\n        switch (status?.toLowerCase()) {\n            case 'playing': return 'playing';\n            case 'paused': return 'paused';\n            default: return 'stopped';\n        }\n    }\n\n    async playPause(): Promise<void> {\n        await this.execCommand('playerctl play-pause');\n    }\n\n    async nextTrack(): Promise<void> {\n        await this.execCommand('playerctl next');\n    }\n\n    async previousTrack(): Promise<void> {\n        await this.execCommand('playerctl previous');\n    }\n\n    private execCommand(command: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            exec(command, (error, stdout, stderr) => {\n                if (error) {\n                    reject(error);\n                } else {\n                    resolve(stdout);\n                }\n            });\n        });\n    }\n}\n","module.exports = require(\"os\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport { MusicController } from './musicController';\n\nlet musicController: MusicController;\n\nexport function activate(context: vscode.ExtensionContext) {\n    console.log('Cross-Platform Music extension is now active!');\n\n    // Initialize the music controller\n    musicController = new MusicController(context);\n\n    // Add to extension context for proper disposal\n    context.subscriptions.push(musicController);\n\n    console.log('Music controller initialized');\n}\n\nexport function deactivate() {\n    if (musicController) {\n        musicController.dispose();\n    }\n    console.log('Cross-Platform Music extension deactivated');\n}\n"],"names":["module","exports","require","constructor","context","disposables","cornerWidget","this","musicService","CrossPlatformMusicService","statusBarItem","vscode","window","createStatusBarItem","StatusBarAlignment","Left","musicWebviewProvider","MusicWebviewProvider","extensionUri","initializeComponents","registerCommands","setupEventHandlers","provider","registerWebviewViewProvider","push","updateStatusBar","config","workspace","getConfiguration","get","show","showCornerWidget","commands","registerCommand","hideCornerWidget","showMusicPanel","playPause","nextTrack","previousTrack","refresh","onTrackChanged","track","updateCornerWidget","updateTrack","onPositionChanged","position","updatePosition","configListener","onDidChangeConfiguration","e","affectsConfiguration","handleConfigurationChange","status","text","title","artist","tooltip","album","command","hide","statusIcon","Right","currentTrack","getCurrentTrack","showInformationMessage","executeCommand","dispose","forEach","d","_extensionUri","currentPosition","resolveWebviewView","webviewView","_token","_view","webview","options","enableScripts","localResourceRoots","html","_getHtmlForWebview","onDidReceiveMessage","async","data","type","_updateWebview","postMessage","updateInterval","platform","os","console","log","musicAPI","WindowsMusicAPI","MacOSMusicAPI","LinuxMusicAPI","initialize","startPolling","interval","setInterval","updateTrackInfo","trackInfo","setCurrentTrack","error","wasPlayingBefore","isPlayingNow","trackChanged","positionChanged","Math","abs","onTrackChangedCallback","undefined","onPositionChangedCallback","callback","showErrorMessage","clearInterval","MusicAPI","isAvailable","execPowerShell","warn","script","result","parseTrackInfo","output","lines","trim","split","length","parts","parseFloat","duration","mapStatus","toLowerCase","Promise","resolve","reject","exec","replace","stdout","stderr","execAppleScript","apps","app","execCommand","parseDuration","minutes","parseInt","seconds","isNaN","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","musicController","MusicController","subscriptions"],"sourceRoot":""}
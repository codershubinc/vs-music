(()=>{"use strict";var t={317:t=>{t.exports=require("child_process")},395:function(t,e,n){var s,i=this&&this.__createBinding||(Object.create?function(t,e,n,s){void 0===s&&(s=n);var i=Object.getOwnPropertyDescriptor(e,n);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,s,i)}:function(t,e,n,s){void 0===s&&(s=n),t[s]=e[n]}),r=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||(s=function(t){return s=Object.getOwnPropertyNames||function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[e.length]=n);return e},s(t)},function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n=s(t),a=0;a<n.length;a++)"default"!==n[a]&&i(e,t,n[a]);return r(e,t),e});Object.defineProperty(e,"__esModule",{value:!0}),e.MusicController=void 0;const o=a(n(398)),c=n(408);e.MusicController=class{constructor(t){this.context=t,this.disposables=[],this.cornerWidget=null,this.musicService=new c.CrossPlatformMusicService,this.statusBarItem=o.window.createStatusBarItem(o.StatusBarAlignment.Left,10),this.musicWebviewProvider=new l(t.extensionUri,this.musicService),this.initializeComponents(),this.registerCommands(),this.setupEventHandlers()}initializeComponents(){const t=o.window.registerWebviewViewProvider("musicExplorer",this.musicWebviewProvider);this.disposables.push(t),this.updateStatusBar(null);const e=o.workspace.getConfiguration("music");e.get("showInStatusBar",!0)&&this.statusBarItem.show(),e.get("enableCornerWidget",!0)&&this.showCornerWidget(),this.disposables.push(this.statusBarItem)}registerCommands(){const t=[o.commands.registerCommand("music.showCornerWidget",()=>this.showCornerWidget()),o.commands.registerCommand("music.hideCornerWidget",()=>this.hideCornerWidget()),o.commands.registerCommand("music.showMusicPanel",()=>this.showMusicPanel()),o.commands.registerCommand("music.playPause",()=>this.musicService.playPause()),o.commands.registerCommand("music.nextTrack",()=>this.musicService.nextTrack()),o.commands.registerCommand("music.previousTrack",()=>this.musicService.previousTrack()),o.commands.registerCommand("music.refreshMusicExplorer",()=>this.musicWebviewProvider.refresh())];this.disposables.push(...t)}setupEventHandlers(){this.musicService.onTrackChanged(t=>{this.updateStatusBar(t),this.updateCornerWidget(t),this.musicWebviewProvider.updateTrack(t)}),this.musicService.onPositionChanged(t=>{this.musicWebviewProvider.updatePosition(t)});const t=o.workspace.onDidChangeConfiguration(t=>{t.affectsConfiguration("music")&&this.handleConfigurationChange()});this.disposables.push(t)}updateStatusBar(t){if(o.workspace.getConfiguration("music").get("showInStatusBar",!0))if(t&&"stopped"!==t.status){const e=`${"playing"===t.status?"$(play)":"$(debug-pause)"} ${t.title} - ${t.artist}`;this.statusBarItem.text=e,this.statusBarItem.tooltip=`${t.title}\n${t.artist}\n${t.album}`,this.statusBarItem.command="music.showMusicPanel",this.statusBarItem.show()}else this.statusBarItem.text="$(music) No music playing",this.statusBarItem.tooltip="No music currently playing",this.statusBarItem.command="music.showMusicPanel",this.statusBarItem.show();else this.statusBarItem.hide()}updateCornerWidget(t){if(this.cornerWidget)if(t&&"stopped"!==t.status){const e="playing"===t.status?"♪":"⏸";this.cornerWidget.text=`${e} ${t.title}`,this.cornerWidget.tooltip=`${t.title} - ${t.artist}`}else this.cornerWidget.text="♪ No music",this.cornerWidget.tooltip="No music playing"}showCornerWidget(){this.cornerWidget||(this.cornerWidget=o.window.createStatusBarItem(o.StatusBarAlignment.Right,1e3),this.cornerWidget.command="music.showMusicPanel");const t=this.musicService.getCurrentTrack();this.updateCornerWidget(t),this.cornerWidget.show(),o.window.showInformationMessage("Music corner widget is now visible")}hideCornerWidget(){this.cornerWidget&&(this.cornerWidget.hide(),o.window.showInformationMessage("Music corner widget is now hidden"))}showMusicPanel(){o.commands.executeCommand("musicExplorer.focus")}handleConfigurationChange(){const t=o.workspace.getConfiguration("music");t.get("showInStatusBar",!0)?this.statusBarItem.show():this.statusBarItem.hide(),t.get("enableCornerWidget",!0)&&!this.cornerWidget?this.showCornerWidget():!t.get("enableCornerWidget",!0)&&this.cornerWidget&&this.hideCornerWidget()}dispose(){this.musicService.dispose(),this.disposables.forEach(t=>t.dispose()),this.cornerWidget&&this.cornerWidget.dispose()}};class l{constructor(t,e){this._extensionUri=t,this.musicService=e,this.currentTrack=null,this.currentPosition=0}resolveWebviewView(t,e,n){this._view=t,t.webview.options={enableScripts:!0,localResourceRoots:[this._extensionUri]},t.webview.html=this._getHtmlForWebview(t.webview),t.webview.onDidReceiveMessage(async t=>{switch(t.type){case"playPause":await this.musicService.playPause();break;case"nextTrack":await this.musicService.nextTrack();break;case"previousTrack":await this.musicService.previousTrack()}})}updateTrack(t){this.currentTrack=t,this._updateWebview()}updatePosition(t){this.currentPosition=t,this._updateWebview()}refresh(){this._view&&(this._view.webview.html=this._getHtmlForWebview(this._view.webview))}_updateWebview(){this._view&&this._view.webview.postMessage({type:"updateTrack",track:this.currentTrack,position:this.currentPosition})}_getHtmlForWebview(t){return'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Music Player</title>\n    <style>\n        body {\n            font-family: var(--vscode-font-family);\n            font-size: var(--vscode-font-size);\n            color: var(--vscode-foreground);\n            background-color: var(--vscode-sideBar-background);\n            margin: 0;\n            padding: 16px;\n        }\n        \n        .music-container {\n            display: flex;\n            flex-direction: column;\n            gap: 12px;\n        }\n        \n        .track-info {\n            text-align: center;\n            padding: 12px;\n            background-color: var(--vscode-editor-background);\n            border-radius: 6px;\n            border: 1px solid var(--vscode-panel-border);\n        }\n        \n        .track-title {\n            font-weight: bold;\n            font-size: 14px;\n            margin-bottom: 4px;\n            white-space: nowrap;\n            overflow: hidden;\n            text-overflow: ellipsis;\n        }\n        \n        .track-artist {\n            color: var(--vscode-descriptionForeground);\n            font-size: 12px;\n            margin-bottom: 2px;\n        }\n        \n        .track-album {\n            color: var(--vscode-descriptionForeground);\n            font-size: 11px;\n        }\n        \n        .progress-container {\n            margin: 8px 0;\n        }\n        \n        .progress-bar {\n            width: 100%;\n            height: 4px;\n            background-color: var(--vscode-progressBar-background);\n            border-radius: 2px;\n            overflow: hidden;\n        }\n        \n        .progress-fill {\n            height: 100%;\n            background-color: var(--vscode-progressBar-background);\n            transition: width 0.3s ease;\n        }\n        \n        .time-info {\n            display: flex;\n            justify-content: space-between;\n            font-size: 10px;\n            color: var(--vscode-descriptionForeground);\n            margin-top: 4px;\n        }\n        \n        .controls {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-top: 12px;\n        }\n        \n        .control-btn {\n            background: var(--vscode-button-background);\n            color: var(--vscode-button-foreground);\n            border: none;\n            border-radius: 4px;\n            padding: 8px 12px;\n            cursor: pointer;\n            font-size: 12px;\n            transition: background-color 0.2s;\n        }\n        \n        .control-btn:hover {\n            background: var(--vscode-button-hoverBackground);\n        }\n        \n        .control-btn:active {\n            transform: scale(0.95);\n        }\n        \n        .no-music {\n            text-align: center;\n            color: var(--vscode-descriptionForeground);\n            font-style: italic;\n            padding: 24px;\n        }\n        \n        .status-indicator {\n            display: inline-block;\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            margin-right: 6px;\n        }\n        \n        .status-playing {\n            background-color: var(--vscode-testing-iconPassed);\n            animation: pulse 1.5s infinite;\n        }\n        \n        .status-paused {\n            background-color: var(--vscode-testing-iconQueued);\n        }\n        \n        .status-stopped {\n            background-color: var(--vscode-testing-iconFailed);\n        }\n        \n        @keyframes pulse {\n            0% { opacity: 1; }\n            50% { opacity: 0.5; }\n            100% { opacity: 1; }\n        }\n    </style>\n</head>\n<body>\n    <div class="music-container">\n        <div id="trackInfo" class="no-music">\n            No music currently playing\n        </div>\n    </div>\n\n    <script>\n        const vscode = acquireVsCodeApi();\n        \n        let currentTrack = null;\n        let currentPosition = 0;\n\n        function formatTime(seconds) {\n            if (!seconds || isNaN(seconds)) return \'--:--\';\n            const mins = Math.floor(seconds / 60);\n            const secs = Math.floor(seconds % 60);\n            return mins + \':\' + (secs < 10 ? \'0\' : \'\') + secs;\n        }\n\n        function updateUI() {\n            const container = document.getElementById(\'trackInfo\');\n            \n            if (!currentTrack || currentTrack.status === \'stopped\') {\n                container.className = \'no-music\';\n                container.innerHTML = \'No music currently playing\';\n                return;\n            }\n\n            const progressPercent = currentTrack.duration ? \n                (currentPosition / currentTrack.duration) * 100 : 0;\n\n            container.className = \'track-info\';\n            container.innerHTML = `\n                <div class="track-title">\n                    <span class="status-indicator status-${currentTrack.status}"></span>\n                    ${currentTrack.title}\n                </div>\n                <div class="track-artist">${currentTrack.artist}</div>\n                <div class="track-album">${currentTrack.album}</div>\n                \n                ${currentTrack.duration ? `\n                <div class="progress-container">\n                    <div class="progress-bar">\n                        <div class="progress-fill" style="width: ${progressPercent}%"></div>\n                    </div>\n                    <div class="time-info">\n                        <span>${formatTime(currentPosition)}</span>\n                        <span>${formatTime(currentTrack.duration)}</span>\n                    </div>\n                </div>\n                ` : \'\'}\n                \n                <div class="controls">\n                    <button class="control-btn" onclick="sendCommand(\'previousTrack\')">⏮</button>\n                    <button class="control-btn" onclick="sendCommand(\'playPause\')">\n                        ${currentTrack.status === \'playing\' ? \'⏸\' : \'▶\'}\n                    </button>\n                    <button class="control-btn" onclick="sendCommand(\'nextTrack\')">⏭</button>\n                </div>\n            `;\n        }\n\n        function sendCommand(command) {\n            vscode.postMessage({ type: command });\n        }\n\n        // Listen for messages from the extension\n        window.addEventListener(\'message\', event => {\n            const message = event.data;\n            if (message.type === \'updateTrack\') {\n                currentTrack = message.track;\n                currentPosition = message.position || 0;\n                updateUI();\n            }\n        });\n\n        // Initial UI setup\n        updateUI();\n    <\/script>\n</body>\n</html>'}}},398:t=>{t.exports=require("vscode")},408:function(t,e,n){var s,i=this&&this.__createBinding||(Object.create?function(t,e,n,s){void 0===s&&(s=n);var i=Object.getOwnPropertyDescriptor(e,n);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,s,i)}:function(t,e,n,s){void 0===s&&(s=n),t[s]=e[n]}),r=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||(s=function(t){return s=Object.getOwnPropertyNames||function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[e.length]=n);return e},s(t)},function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n=s(t),a=0;a<n.length;a++)"default"!==n[a]&&i(e,t,n[a]);return r(e,t),e});Object.defineProperty(e,"__esModule",{value:!0}),e.CrossPlatformMusicService=void 0;const o=a(n(398)),c=n(317),l=a(n(857));e.CrossPlatformMusicService=class{constructor(){switch(this.updateInterval=null,this.currentTrack=null,this.platform=l.platform(),console.log(`Detected platform: ${this.platform}`),this.platform){case"win32":this.musicAPI=new d;break;case"darwin":this.musicAPI=new p;break;default:this.musicAPI=new h}this.initialize()}async initialize(){await this.musicAPI.initialize(),this.startPolling()}startPolling(){const t=o.workspace.getConfiguration("music").get("updateInterval",1e3);this.updateInterval=setInterval(()=>{this.updateTrackInfo()},t)}async updateTrackInfo(){try{const t=await this.musicAPI.getCurrentTrack();this.setCurrentTrack(t)}catch(t){console.error("Error updating track info:",t),this.setCurrentTrack(null)}}setCurrentTrack(t){const e="playing"===this.currentTrack?.status,n="playing"===t?.status,s=!this.currentTrack||!t||this.currentTrack.title!==t.title||this.currentTrack.artist!==t.artist||this.currentTrack.status!==t.status,i=this.currentTrack&&t&&Math.abs((this.currentTrack.position||0)-(t.position||0))>2;this.currentTrack=t,s||e!==n?this.onTrackChangedCallback&&this.onTrackChangedCallback(t):i&&void 0!==t?.position&&this.onPositionChangedCallback&&this.onPositionChangedCallback(t.position)}getCurrentTrack(){return this.currentTrack}onTrackChanged(t){this.onTrackChangedCallback=t}onPositionChanged(t){this.onPositionChangedCallback=t}async playPause(){try{await this.musicAPI.playPause()}catch(t){console.error("Error toggling play/pause:",t),o.window.showErrorMessage("Failed to toggle play/pause")}}async nextTrack(){try{await this.musicAPI.nextTrack()}catch(t){console.error("Error skipping to next track:",t),o.window.showErrorMessage("Failed to skip to next track")}}async previousTrack(){try{await this.musicAPI.previousTrack()}catch(t){console.error("Error going to previous track:",t),o.window.showErrorMessage("Failed to go to previous track")}}dispose(){this.updateInterval&&(clearInterval(this.updateInterval),this.updateInterval=null),this.musicAPI&&this.musicAPI.dispose?.()}};class u{}class d extends u{constructor(){super(...arguments),this.isAvailable=!1}async initialize(){try{await this.execPowerShell("Get-Process"),this.isAvailable=!0,console.log("Windows Media Control API initialized")}catch(t){console.warn("Windows Media Control not available:",t),this.isAvailable=!1}}async getCurrentTrack(){if(!this.isAvailable)return null;try{const t="\n                Add-Type -AssemblyName System.Windows.Forms\n                $sessions = [Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager]::RequestAsync().GetAwaiter().GetResult().GetSessions()\n                foreach ($session in $sessions) {\n                    $mediaProps = $session.TryGetMediaPropertiesAsync().GetAwaiter().GetResult()\n                    $playbackInfo = $session.GetPlaybackInfo()\n                    if ($mediaProps -and $playbackInfo.PlaybackStatus -ne 'Closed') {\n                        $title = $mediaProps.Title\n                        $artist = $mediaProps.Artist\n                        $album = $mediaProps.AlbumTitle\n                        $status = $playbackInfo.PlaybackStatus.ToString().ToLower()\n                        $position = $session.GetTimelineProperties().Position.TotalSeconds\n                        $duration = $session.GetTimelineProperties().EndTime.TotalSeconds\n                        Write-Output \"$title|$artist|$album|$position|$duration|$status\"\n                        break\n                    }\n                }\n            ",e=await this.execPowerShell(t);return this.parseTrackInfo(e)}catch(t){return console.error("Error getting Windows media info:",t),null}}parseTrackInfo(t){const e=t.trim().split("\n");if(0===e.length||!e[0])return null;const n=e[0].split("|");return n.length>=6?{title:n[0]||"Unknown Title",artist:n[1]||"Unknown Artist",album:n[2]||"Unknown Album",position:parseFloat(n[3])||0,duration:parseFloat(n[4])||void 0,status:this.mapStatus(n[5])}:null}mapStatus(t){switch(t?.toLowerCase()){case"playing":return"playing";case"paused":return"paused";default:return"stopped"}}async playPause(){await this.execPowerShell("\n            $sessions = [Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager]::RequestAsync().GetAwaiter().GetResult().GetSessions()\n            foreach ($session in $sessions) {\n                $playbackInfo = $session.GetPlaybackInfo()\n                if ($playbackInfo.PlaybackStatus -eq 'Playing') {\n                    $session.TryPauseAsync().GetAwaiter().GetResult()\n                } else {\n                    $session.TryPlayAsync().GetAwaiter().GetResult()\n                }\n                break\n            }\n        ")}async nextTrack(){await this.execPowerShell("\n            $sessions = [Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager]::RequestAsync().GetAwaiter().GetResult().GetSessions()\n            foreach ($session in $sessions) {\n                $session.TrySkipNextAsync().GetAwaiter().GetResult()\n                break\n            }\n        ")}async previousTrack(){await this.execPowerShell("\n            $sessions = [Windows.Media.Control.GlobalSystemMediaTransportControlsSessionManager]::RequestAsync().GetAwaiter().GetResult().GetSessions()\n            foreach ($session in $sessions) {\n                $session.TrySkipPreviousAsync().GetAwaiter().GetResult()\n                break\n            }\n        ")}execPowerShell(t){return new Promise((e,n)=>{(0,c.exec)(`powershell -Command "${t.replace(/"/g,'\\"')}"`,(t,s,i)=>{t?n(t):e(s)})})}}class p extends u{constructor(){super(...arguments),this.isAvailable=!1}async initialize(){try{await this.execAppleScript('tell application "System Events" to get name of processes'),this.isAvailable=!0,console.log("macOS AppleScript API initialized")}catch(t){console.warn("AppleScript not available:",t),this.isAvailable=!1}}async getCurrentTrack(){if(!this.isAvailable)return null;try{const t=["Music","Spotify","iTunes"];for(const e of t)try{const t=`\n                        tell application "${e}"\n                            if player state is not stopped then\n                                set trackTitle to name of current track\n                                set trackArtist to artist of current track\n                                set trackAlbum to album of current track\n                                set trackPosition to player position\n                                set trackDuration to duration of current track\n                                set playerState to player state as string\n                                return trackTitle & "|" & trackArtist & "|" & trackAlbum & "|" & trackPosition & "|" & trackDuration & "|" & playerState\n                            end if\n                        end tell\n                    `,n=await this.execAppleScript(t),s=this.parseTrackInfo(n);if(s)return s}catch(t){continue}return null}catch(t){return console.error("Error getting macOS media info:",t),null}}parseTrackInfo(t){const e=t.trim().split("|");return e.length>=6?{title:e[0]||"Unknown Title",artist:e[1]||"Unknown Artist",album:e[2]||"Unknown Album",position:parseFloat(e[3])||0,duration:parseFloat(e[4])||void 0,status:this.mapStatus(e[5])}:null}mapStatus(t){switch(t?.toLowerCase()){case"playing":return"playing";case"paused":return"paused";default:return"stopped"}}async playPause(){const t=["Music","Spotify","iTunes"];for(const e of t)try{await this.execAppleScript(`tell application "${e}" to playpause`);break}catch(t){continue}}async nextTrack(){const t=["Music","Spotify","iTunes"];for(const e of t)try{await this.execAppleScript(`tell application "${e}" to next track`);break}catch(t){continue}}async previousTrack(){const t=["Music","Spotify","iTunes"];for(const e of t)try{await this.execAppleScript(`tell application "${e}" to previous track`);break}catch(t){continue}}execAppleScript(t){return new Promise((e,n)=>{(0,c.exec)(`osascript -e '${t.replace(/'/g,"\\'")}'`,(t,s,i)=>{t?n(t):e(s)})})}}class h extends u{constructor(){super(...arguments),this.isAvailable=!1}async initialize(){try{await this.execCommand("playerctl --version"),this.isAvailable=!0,console.log("Linux playerctl API initialized")}catch(t){console.warn("playerctl not available:",t),this.isAvailable=!1}}async getCurrentTrack(){if(!this.isAvailable)return null;try{const t=await this.execCommand('playerctl metadata --format "{{title}}|{{artist}}|{{album}}|{{duration(position)}}|{{duration(mpris:length)}}|{{status}}"');return this.parseTrackInfo(t)}catch(t){return console.error("Error getting Linux media info:",t),null}}parseTrackInfo(t){const e=t.trim().split("|");return e.length>=6?{title:e[0]||"Unknown Title",artist:e[1]||"Unknown Artist",album:e[2]||"Unknown Album",position:this.parseDuration(e[3]),duration:this.parseDuration(e[4]),status:this.mapStatus(e[5])}:null}parseDuration(t){if(!t||""===t||"null"===t)return;const e=t.split(":");if(2===e.length){const t=parseInt(e[0]),n=parseInt(e[1]);if(!isNaN(t)&&!isNaN(n))return 60*t+n}}mapStatus(t){switch(t?.toLowerCase()){case"playing":return"playing";case"paused":return"paused";default:return"stopped"}}async playPause(){await this.execCommand("playerctl play-pause")}async nextTrack(){await this.execCommand("playerctl next")}async previousTrack(){await this.execCommand("playerctl previous")}execCommand(t){return new Promise((e,n)=>{(0,c.exec)(t,(t,s,i)=>{t?n(t):e(s)})})}}},857:t=>{t.exports=require("os")}},e={};function n(s){var i=e[s];if(void 0!==i)return i.exports;var r=e[s]={exports:{}};return t[s].call(r.exports,r,r.exports,n),r.exports}var s={};(()=>{var t=s;Object.defineProperty(t,"__esModule",{value:!0}),t.activate=function(t){console.log("Cross-Platform Music extension is now active!"),i=new e.MusicController(t),t.subscriptions.push(i),console.log("Music controller initialized")},t.deactivate=function(){i&&i.dispose(),console.log("Cross-Platform Music extension deactivated")};const e=n(395);let i})(),module.exports=s})();